

//TODO
test github project to test dependencies

bufferless vertex input
geometry shader
tessellation shader
compute shader

code gen for uniforms
code gen for buffers

all glsl functions
bvec
ivec
uvec
dvec

StaticMethodCall for collect caller2callee
  and in Vec2f uv = Vec2f(v1, v2)

statics from other files
assert "no such method" (now it is null pointer, although IDEA stresses it too)
assert assignment vs copy
  but count consts like varying, uniforms, finals
assert finals are effectively final
assert last statement is returns (count ifs with elses)
todo asserts for modification methods
todo asserts for in/out args in main
function overloading
logging
structures
classes, methods
uniforms are common for both vertex and fragment, handle it somehow
  check same type
  prevent somehow from filling from FS
  fs extends vs ?
  separate structure for uniforms ?

close SimpleWatch3D if shader didn't loaded
  or just don't spawn logs

Groovy don't detects wrong assignment
    o.gl_FragColor = foo2(sum);
    void foo2(Vec4f vv) {vv.w = 1}


//DONE
java "common operations", because Operations.clamp - are too slow
java reloadable classes (tick, first init, full, except watcher)
swizzles
extension module for "float + Vec2f" like
real-time shaders reloading
asserts
  varyings, uniforms, vectors
functions
prefix for VS output (FS input) to avoid name clashing

